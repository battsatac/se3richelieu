#!/bin/bash

#***********************************************#
#             maj_poste.sh                      #
#          written by Stephan BATT              #
#                                               #
# script destiné à être exécuté à l'extinction	#
# du poste par systemd							#
#***********************************************#
readonly VERSION='4.0'
# Historique des versions :
# V4.0 05/02/19
# Option --force pour ne pas ternir compte de la date
# Option --version et --help

# V3 16/12/18
# Tient compte de l'horaire pour s'activer

# v2.1 30 aout 2018 : 
# - test argument en entrée

# v2 11 mars 2018


usage() {
    echo "Met à jour la machine en tenant compte de la date et de l'heure"
    echo "$(basename "${0}") [-f|--force] [-h|--help] [-v|--version]"
    echo ''
}

version() {
    echo "$(basename "${0}") v${VERSION}"
    echo ''
}


# Inspiré de https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
	-h|--help)
	    usage
	    exit 0
	    ;;
	-v|--version)
	    version
	    exit 0
	    ;;
	-f|--force)
	    FORCE=true
	    shift
	    ;;
	*)
	    echo "option erronée"
	    usage
	    exit 1
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

TEST_APT="/var/lib/apt/lists/lock"
TEST_DPKG="/var/lib/dpkg/lock"
ATTENTE_MAX=$(( 5 * 60 ))	# temps d'attente maximal en secondes, soit 5 minutes

#ATTENTE_MAX=$(( 10 ))		# temps d'attente maximal en secondes, soit 5 minutes
#INTERVALLE_TEST=5			# temps d'attente maximal en secondes

LINESEP="###########################################################"

function attend_verrou ()
{
    # La fonction prend en argument : 
    # 1 : le nom du fichier à tester
    # 2 : le temps maximal d'attente en SECONDES
    # 3 : optionnel : l'intervalle de temps en SECONDES entre les tests

    # Traitement des arguments :

    if [ -z "$1" ]
    then
	echo "Fichier verrou non fourni. Abandon"
	exit 1
    fi
    declare NOM_FICHIER="$1"
    declare -i TEMPS_MAX=${2:-60}		# temps d'attente maximal en secondes (par défaut on attend 1 minute)
    declare -i INTERVALLE=${3:-5}		# Intervalle de test, par défaut toutes les 5 secondes si non fourni

    # Début du programme
    declare -i compteur=0

    while fuser "$1" >/dev/null 2>&1 ; do
	#	while true ; do
	# inspiré de https://askubuntu.com/questions/132059/how-to-make-a-package-manager-wait-if-another-instance-of-apt-is-running
	echo "$(date) : En attente du deverrouillage de $1"
	sleep ${INTERVALLE}
	((compteur > TEMPS_MAX)) && return 1
	((compteur+=INTERVALLE))
    done
    return 0
}

function cest_le_bon_moment ()
{
    # Renvoie vrai si on considère que c'est le bon moment
    # pour faire la mise à jour
    # le soir après les cours 
    # le mercredi ou samedi midi 
    # le dimanche

    H=$(date +%k)       # heure
    echo "heure : $H" 
    JDS=$(date +%u)     # jour de semaine
    echo "jour de semaine: $JDS" 
    # if (( $H>=18  )) || ( ( (( $JDS==6 )) || (( $JDS==3 )) ) && (( $H>=12 )) ) || (( $JDS==7 )) ; then
    if (( $H>=18 || (($JDS==6 || $JDS==3) && $H>=12) || $JDS==7 )); then
	echo "horaire adéquat pour une mise à jour"
	return 0
    else
	echo "horaire inadapté pour une mise à jour"
	return 1
    fi
}


if  cest_le_bon_moment || [ -n "${FORCE}" ]; then
    echo -e "\n${LINESEP}\n\t Tentative d'interrogation des dépôts\n${LINESEP}\n"
    if  attend_verrou ${TEST_APT} ${ATTENTE_MAX}; then 
	apt-get update
    fi

    echo -e "\n${LINESEP}\n\t Tentative de mise à jour du poste $(hostname)\n${LINESEP}\n"
    if  attend_verrou ${TEST_DPKG} ${ATTENTE_MAX}; then 
	#echo "on met a jour"
	#: <<- EOF
	dpkg --configure -a

	# D'après https://debian-handbook.info/browse/stable/sect.automatic-upgrades.html 

	export DEBIAN_FRONTEND=noninteractive
	yes '' | apt-get -y --allow-unauthenticated -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" dist-upgrade && \
	    apt-get autoclean  && \
	    apt-get autoremove -y
	#EOF
    fi
fi
